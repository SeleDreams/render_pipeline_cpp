# Sphere Point Effect

vertex:
    inout: |
        #if !STEREO_MODE
        uniform mat4 p3d_ModelViewMatrix;
        uniform mat4 p3d_ProjectionMatrix;
        uniform float point_radius;
        #endif

    post_transform: |
        #if !STEREO_MODE
        // WINDOW_WIDTH * p3d_ProjectionMatrix[0][0] = near
        // (p3d_ModelViewMatrix * p3d_Vertex).y = depth in view coordinates
        // so, gl_PointSize is radius in pixels in NDC
        gl_PointSize = point_radius * WINDOW_WIDTH * p3d_ProjectionMatrix[0][0] / (p3d_ModelViewMatrix * p3d_Vertex).y;
        //
        // projected coordinates of the point and radius in pixel
        vOutput.normal = vec3((gl_Position.xy / gl_Position.w + 1.0f) * (SCREEN_SIZE / 2.0f), gl_PointSize / 2.0f);
        #endif

geometry:
    defines: |
        #define USE_POINTS_LAYOUT 1

    inout: |
        #if STEREO_MODE
        uniform float point_radius;
        #endif

    post_transform: |
        #if STEREO_MODE
        gl_PointSize = point_radius * WINDOW_WIDTH * MainSceneData.stereo_ProjectionMatrix[layer][0][0] /
            (MainSceneData.stereo_ViewMatrix[layer] * gl_in[0].gl_Position).y;
        vOutput.normal = vec3((gl_Position.xy / gl_Position.w + 1.0f) * (SCREEN_SIZE / 2.0f), gl_PointSize / 2.0f);
        #endif

fragment:
    inout: |
        uniform float point_radius;
        #if !STEREO_MODE
        uniform mat4 p3d_ViewMatrix;
        #endif
        vec3 points_unit_coord;

    main_begin: |
        // lower-left is (-1, -1), upper-right is (1, 1)
        points_unit_coord.xz = (gl_FragCoord.xy - vOutput.normal.xy) / vOutput.normal.z;
        const float magnitude = dot(points_unit_coord.xz, points_unit_coord.xz);
        if (magnitude > 1.0f) discard;
        points_unit_coord.y = -sqrt(1.0f - magnitude);

    texcoord:
        // lower-left is (0, 0), upper-right is (1, 1)
        texcoord = fma(points_unit_coord.xz, vec2(0.5f), vec2(0.5f));

    material: |
        #if STEREO_MODE
        m.normal = normalize((inverse(MainSceneData.stereo_ViewMatrix[gl_Layer]) * vec4(points_unit_coord, 0)).xyz);
        #else
        m.normal = normalize((inverse(p3d_ViewMatrix) * vec4(points_unit_coord, 0)).xyz);
        #endif

    main_end: |
        #if STEREO_MODE
        const vec4 new_pos = MainSceneData.stereo_proj_mat[gl_Layer] *
            vec4(0, 0, -(points_unit_coord.y * point_radius + (MainSceneData.stereo_ViewMatrix[gl_Layer] * vec4(vOutput.position, 1)).y), 1);
        #else
        const vec4 new_pos = MainSceneData.proj_mat *
            vec4(0, 0, -(points_unit_coord.y * point_radius + (p3d_ViewMatrix * vec4(vOutput.position, 1)).y), 1);
        #endif
        gl_FragDepth = fma(new_pos.z / new_pos.w, 0.5, 0.5);
